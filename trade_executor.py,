from pybit import HTTP
from config import BYBIT_API_KEY, BYBIT_API_SECRET
import logging

# Initialize session with your Bybit API credentials
session = HTTP(api_key=BYBIT_API_KEY, api_secret=BYBIT_API_SECRET)

def get_min_qty(symbol):
    try:
        # Use the public query for market details
        response = session.public_query("v2/public/symbols")
        symbols_info = response['result']
        
        # Find the symbol in the list
        symbol_info = next((s for s in symbols_info if s['name'] == symbol), None)
        
        if symbol_info:
            min_qty = float(symbol_info['lot_size_filter']['min_trading_qty'])
            logging.debug(f"Fetched min_qty for {symbol}: {min_qty}")
            return min_qty
        else:
            logging.error(f"Symbol {symbol} not found in market data.")
            return None
    except Exception as e:
        logging.error(f"Error fetching minimum quantity for {symbol}: {e}")
        return None

def execute_trade(symbol, side, entry, quantity, take_profit, stop_loss):
    try:
        order = session.place_order(
            category="linear",
            symbol=symbol,
            side=side,
            orderType="Market",
            qty=str(quantity),
            takeProfit=str(take_profit),
            stopLoss=str(stop_loss),
        )
        logging.debug(f"Order response: {order}")
        return order
    except Exception as e:
        logging.error(f"Trade execution error: {e}")
        return None

def fetch_mark_price(symbol):
    try:
        response = session.get_tickers(category="linear", symbol=symbol)
        mark_price = float(response['result']['list'][0]['markPrice'])
        return mark_price
    except Exception as e:
        logging.error(f"Error fetching mark price for {symbol}: {e}")
        return None

